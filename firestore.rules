rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAnyAuthenticated() { 
      return request.auth != null;
    }

    function isUserAuthenticated(userId) { 
      return isAnyAuthenticated() && userId == request.auth.uid;
    }

    function isValidUserCreate(user, targetUserId) {
      return user.size() == 3
      && 'email' in user && user.email is string
      && 'username' in user && user.username is string
      && 'uid' in user && user.uid is string && user.uid == targetUserId;
    }

    function isValidUserUpdate(user, targetUserId) {
      return user.size() == 3
      && 'email' in user && user.email is string
      && 'username' in user && user.username is string
      && 'uid' in user && user.uid is string && user.uid == targetUserId;
    }

    function isValidBookmarkAdd(bookmark) {
      return bookmark.size() == 6
      && 'authorName' in bookmark && bookmark.authorName is string && bookmark.authorName.size() > 0
      && 'content' in bookmark && bookmark.content is string && bookmark.content.size() > 0
      && 'createdAt' in bookmark && bookmark.createdAt is string
      && 'id' in bookmark && bookmark.id is string
      && 'saveId' in bookmark && bookmark.saveId is string
      && 'title' in bookmark && bookmark.title is string && bookmark.title.size() > 0
    }

    function isValidBookmarkUpdate(bookmark) {
      return bookmark.size() == 6
      && 'authorName' in bookmark && bookmark.authorName is string && bookmark.authorName.size() > 0
      && 'content' in bookmark && bookmark.content is string && bookmark.content.size() > 0
      && 'createdAt' in bookmark && bookmark.createdAt is string
      && bookmark.createdAt == resource.data.createdAt
      && 'id' in bookmark && bookmark.id is string
      && 'saveId' in bookmark && bookmark.saveId is string
      && 'title' in bookmark && bookmark.title is string && bookmark.title.size() > 0
    }

    function isValidPostCreate(post) {
      return post.size() == 6
      && 'authorName' in post && post.authorName is string && post.authorName.size() > 0
      && 'content' in post && post.content is string && post.content.size() > 0
      && 'createdAt' in post && post.createdAt is timestamp
      && 'id' in post && post.id is string
      && 'uid' in post && post.uid is string
      && 'title' in post && post.title is string && post.title.size() > 0
    }

    function isValidPostUpdate(post) {
      return post.size() == 6
      && 'authorName' in post && post.authorName is string && post.authorName.size() > 0
      && 'content' in post && post.content is string && post.content.size() > 0
      && 'createdAt' in post && post.createdAt is timestamp
      && 'updatedAt' in post && post.updatedAt is timestamp
      && 'id' in post && post.id is string
      && 'uid' in post && post.uid is string
      && 'title' in post && post.title is string && post.title.size() > 0
    }

    match /users/{userId} {  
      allow get: if isUserAuthenticated(userId);
      allow create: if isUserAuthenticated(userId) && isValidUserCreate(request.resource.data, userId); 
      allow update: if isUserAuthenticated(userId) && isValidUserUpdate(request.resource.data, userId);

      match /bookmarks/{bookmarkId} {
        allow read: if isUserAuthenticated(userId);
        allow create: if isUserAuthenticated(userId) && isValidBookmarkAdd(request.resource.data);
        allow update: if isUserAuthenticated(userId) && isValidBookmarkUpdate(request.resource.data);
        allow delete: if isUserAuthenticated(userId);
      }
    }

    match /posts/{postId} {
      allow read: if isUserAuthenticated(request.auth.uid);
      allow create: if isUserAuthenticated(request.auth.uid) && isValidPostCreate(request.resource.data);
      allow update: if isUserAuthenticated(request.auth.uid) && isValidPostUpdate(request.resource.data);
      allow delete: if isUserAuthenticated(request.auth.uid);
    }
  }
}